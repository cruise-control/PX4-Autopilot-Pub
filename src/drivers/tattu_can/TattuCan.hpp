/****************************************************************************
 *
 *   Copyright (c) 2021 PX4 Development Team. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name PX4 nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/

#pragma once



/****************************************************************************
 * Included Files
 ****************************************************************************/

#ifdef CONFIG_CAN_TXREADY
#  include <nuttx/wqueue.h>
#endif

#include <queue.h>

#ifdef CONFIG_NET_CAN



/* User defined ioctl commands are also supported. These will be forwarded
 * by the upper-half CAN driver to the lower-half CAN driver via the
 * co_ioctl()  method fo the CAN lower-half interface.
 * However, the lower-half driver must reserve a block of commands as follows
 * in order prevent IOCTL command numbers from overlapping.
 *
 * This is generally done as follows.  The first reservation for CAN driver A
 * would look like:
 *
 *   CAN_A_FIRST                (CAN_FIRST + CAN_NCMDS) <- First command
 *   CAN_A_NCMDS                42                      <- Number of commands
 *
 * IOCTL commands for CAN driver A would then be defined in a CAN A header
 * file like:
 *
 *   CANIOC_A_CMD1       _CANIOC(CAN_A_FIRST+0)
 *   CANIOC_A_CMD2       _CANIOC(CAN_A_FIRST+1)
 *   CANIOC_A_CMD3       _CANIOC(CAN_A_FIRST+2)
 *   ...
 *   CANIOC_A_CMD42      _CANIOC(CAN_A_FIRST+41)
 *
 * The next reservation would look like:
 *
 *   CAN_B_FIRST           (CAN_A_FIRST + CAN_A_NCMDS) <- Next command
 *   CAN_B_NCMDS           77                          <- Number of commands
 */

/* CAN payload length and DLC definitions according to ISO 11898-1 */

#define CAN_MAX_DLC 8
#define CAN_MAX_DLEN 8

/* CAN FD payload length and DLC definitions according to ISO 11898-7 */

#define CANFD_MAX_DLC 15
#define CANFD_MAX_DLEN 64

/* Defined bits for canfd_frame.flags
 *
 * The use of struct canfd_frame implies the Extended Data Length (EDL) bit
 * to be set in the CAN frame bitstream on the wire. The EDL bit switch turns
 * the CAN controllers bitstream processor into the CAN FD mode which creates
 * two new options within the CAN FD frame specification:
 *
 * Bit Rate Switch - to indicate a second bitrate is/was used for the payload
 * Error State Indicator - represents the error state of the transmitting
 * node
 *
 * As the CANFD_ESI bit is internally generated by the transmitting CAN
 * controller only the CANFD_BRS bit is relevant for real CAN controllers
 * when building a CAN FD frame for transmission. Setting the CANFD_ESI bit
 * can make sense for virtual CAN interfaces to test applications with echoed
 * frames.
 */

#define CANFD_BRS 0x01 /* bit rate switch (second bitrate for payload data) */
#define CANFD_ESI 0x02 /* error state indicator of the transmitting node */

#define CAN_INV_FILTER     0x20000000U /* to be set in can_filter.can_id */

/****************************************************************************
 * Public Types
 ****************************************************************************/

typedef FAR void *CAN_HANDLE;

struct can_response_s
{
  sq_entry_t flink;

  /* Message-specific data may follow */
}; /* FIXME remove */

typedef uint32_t canid_t;

/* Controller Area Network Error Message Frame Mask structure
 *
 * bit 0-28  : error class mask (see include/uapi/linux/can/error.h)
 * bit 29-31 : set to zero
 */

typedef uint32_t can_err_mask_t;

/* struct can_frame - basic CAN frame structure
 * can_id:  CAN ID of the frame and CAN_*_FLAG flags, see canid_t definition
 * can_dlc: frame payload length in byte (0 .. 8) aka data length code
 *          N.B. the DLC field from ISO 11898-1 Chapter 8.4.2.3 has a 1:1
 *          mapping of the 'data length code' to the real payload length
 * __pad:   padding
 * __res0:  reserved / padding
 * __res1:  reserved / padding
 * data:    CAN frame payload (up to 8 byte)
 */

struct can_frame
{
  canid_t can_id;   /* 32 bit CAN_ID + EFF/RTR/ERR flags */
  uint8_t  can_dlc; /* frame payload length in byte (0 .. CAN_MAX_DLEN) */
  uint8_t  __pad;   /* padding */
  uint8_t  __res0;  /* reserved / padding */
  uint8_t  __res1;  /* reserved / padding */
  uint8_t  data[CAN_MAX_DLEN] __attribute__((aligned(8)));
};

/* struct canfd_frame - CAN flexible data rate frame structure
 * can_id: CAN ID of the frame and CAN_*_FLAG flags, see canid_t definition
 * len:    frame payload length in byte (0 .. CANFD_MAX_DLEN)
 * flags:  additional flags for CAN FD
 * __res0: reserved / padding
 * __res1: reserved / padding
 * data:   CAN FD frame payload (up to CANFD_MAX_DLEN byte)
 */

struct canfd_frame
{
  canid_t can_id;  /* 32 bit CAN_ID + EFF/RTR/ERR flags */
  uint8_t len;     /* frame payload length in byte */
  uint8_t flags;   /* additional flags for CAN FD */
  uint8_t __res0;  /* reserved / padding */
  uint8_t __res1;  /* reserved / padding */
  uint8_t data[CANFD_MAX_DLEN] __attribute__((aligned(8)));
};

/* struct can_filter - CAN ID based filter in can_register().
 * can_id:   relevant bits of CAN ID which are not masked out.
 * can_mask: CAN mask (see description)
 *
 * Description:
 * A filter matches, when
 *
 *   <received_can_id> & mask == can_id & mask
 *
 * The filter can be inverted (CAN_INV_FILTER bit set in can_id) or it can
 * filter for error message frames (CAN_ERR_FLAG bit set in mask).
 */

struct can_filter
{
  canid_t can_id;
  canid_t can_mask;
};

/****************************************************************************
 * Public Function Prototypes
 ****************************************************************************/

#undef EXTERN
#if defined(__cplusplus)
#define EXTERN extern "C"
extern "C"
{
#else
#define EXTERN extern
#endif

#undef EXTERN
#if defined(__cplusplus)
}
#endif

#endif /* CONFIG_CAN */

#include <nuttx/can/can.h>
#include <sys/time.h>

#include <px4_platform_common/module.h>
#include <px4_platform_common/px4_work_queue/ScheduledWorkItem.hpp>

#include <uORB/PublicationMulti.hpp>
#include <uORB/topics/battery_status.h>

using namespace time_literals;

typedef struct __attribute__((packed))
{
	int16_t     manufacturer;
	uint16_t    sku;
	uint16_t    voltage;
	int16_t     current;
	int16_t     temperature;
	uint16_t    remaining_percent;
	uint16_t    cycle_life;
	int16_t     health_status;
	uint16_t    cell_1_voltage;
	uint16_t    cell_2_voltage;
	uint16_t    cell_3_voltage;
	uint16_t    cell_4_voltage;
	uint16_t    cell_5_voltage;
	uint16_t    cell_6_voltage;
	uint16_t    cell_7_voltage;
	uint16_t    cell_8_voltage;
	uint16_t    cell_9_voltage;
	uint16_t    cell_10_voltage;
	uint16_t    cell_11_voltage;
	uint16_t    cell_12_voltage;
	uint16_t    standard_capacity;
	uint16_t    remaining_capacity_mah;
	uint32_t    error_info;
} Tattu12SBatteryMessage;

typedef struct {
	uint64_t timestamp_usec;
	uint32_t extended_can_id;
	size_t      payload_size;
	const void *payload;
} CanFrame;

class TattuCan : public ModuleBase<TattuCan>, public px4::ScheduledWorkItem
{
public:
	TattuCan();

	virtual ~TattuCan();

	static int print_usage(const char *reason = nullptr);
	static int custom_command(int argc, char *argv[]);

	static int task_spawn(int argc, char *argv[]);

	int start();

	int16_t receive(CanFrame *received_frame);

	void set_test_mode(bool mode);
	bool get_test_mode();

	/**
	 * Diagnostics - print some basic information about the driver.
	 */
	int print_status() override;

private:
	static constexpr uint32_t SAMPLE_RATE{20}; // samples per second
	static constexpr size_t TAIL_BYTE_START_OF_TRANSFER{128};

	void Run() override;
	int init_socket();
	int16_t can_read(CanFrame *received_frame);

	int _sk{-1};
	int _fd{-1};
	bool can_fd{true};
	bool _initialized{false};
	bool _test_mode{false};

	struct iovec       _recv_iov {};
	struct canfd_frame _recv_frame {};
	struct msghdr      _recv_msg {};
	struct cmsghdr     *_recv_cmsg {};
	uint8_t            _recv_control[sizeof(struct cmsghdr) + sizeof(struct timeval)] {};
	uint32_t 	   _tattu_id {0x1091};

	uORB::PublicationMulti<battery_status_s> _battery_status_pub{ORB_ID(battery_status)};
};




